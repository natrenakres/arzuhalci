// <auto-generated />
using System;
using System.Collections.Generic;
using ArzuhalCI.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArzuhalCI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241107145437_AllDependencies")]
    partial class AllDependencies
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArzuhalCI.Domain.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "ArzuhalCI.Domain.Customers.Customer.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "ArzuhalCI.Domain.Customers.Customer.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", "public");
                });

            modelBuilder.Entity("ArzuhalCI.Domain.Entries.Analyse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("EntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("entry_id");

                    b.ComplexProperty<Dictionary<string, object>>("AnalyseProps", "ArzuhalCI.Domain.Entries.Analyse.AnalyseProps#AnalyseProps", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Mood")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("mood");

                            b1.Property<bool>("Negative")
                                .HasColumnType("boolean")
                                .HasColumnName("negative");

                            b1.Property<int>("SentimentScore")
                                .HasColumnType("integer")
                                .HasColumnName("sentiment_score");

                            b1.Property<string>("Subject")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("subject");

                            b1.Property<string>("Summary")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("summary");
                        });

                    b.HasKey("Id")
                        .HasName("pk_analyses");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_analyses_customer_id");

                    b.HasIndex("EntryId")
                        .IsUnique()
                        .HasDatabaseName("ix_analyses_entry_id");

                    b.ToTable("analyses", "public");
                });

            modelBuilder.Entity("ArzuhalCI.Domain.Entries.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnalyseId")
                        .HasColumnType("uuid")
                        .HasColumnName("analyse_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.ComplexProperty<Dictionary<string, object>>("Prompt", "ArzuhalCI.Domain.Entries.Entry.Prompt#Prompt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("prompt");
                        });

                    b.HasKey("Id")
                        .HasName("pk_entries");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_entries_customer_id");

                    b.ToTable("entries", "public");
                });

            modelBuilder.Entity("ArzuhalCI.Domain.Petitions.Petition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("entry_id");

                    b.ComplexProperty<Dictionary<string, object>>("Content", "ArzuhalCI.Domain.Petitions.Petition.Content#Content", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("content");
                        });

                    b.HasKey("Id")
                        .HasName("pk_petitions");

                    b.HasIndex("EntryId")
                        .HasDatabaseName("ix_petitions_entry_id");

                    b.ToTable("petitions", "public");
                });

            modelBuilder.Entity("ArzuhalCI.Domain.Entries.Analyse", b =>
                {
                    b.HasOne("ArzuhalCI.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_analyses_customers_customer_id");

                    b.HasOne("ArzuhalCI.Domain.Entries.Entry", "Entry")
                        .WithOne("Analyse")
                        .HasForeignKey("ArzuhalCI.Domain.Entries.Analyse", "EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_analyses_entries_entry_id");

                    b.Navigation("Customer");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("ArzuhalCI.Domain.Entries.Entry", b =>
                {
                    b.HasOne("ArzuhalCI.Domain.Customers.Customer", "Customer")
                        .WithMany("Entries")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entries_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ArzuhalCI.Domain.Petitions.Petition", b =>
                {
                    b.HasOne("ArzuhalCI.Domain.Entries.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_petitions_entries_entry_id");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("ArzuhalCI.Domain.Customers.Customer", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("ArzuhalCI.Domain.Entries.Entry", b =>
                {
                    b.Navigation("Analyse")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
